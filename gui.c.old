/* This file is currently under construction for next release.
Then save this file as main.c and compile it using this command
(those are backticks, not single quotes):
  gcc -Wall -g gui.c `pkg-config --cflags --libs gtk+-2.0`
Then execute it using:
  ./a.out
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <gtk/gtk.h>
#include <unistd.h>

void destroy(GtkObject *object, gpointer user_data)
{
    gtk_main_quit ();
}

gboolean delete_event(GtkWidget *widget, gpointer data)
{
    return FALSE;
}

void enable_clicked(GtkWidget *widget,gpointer data)
{
    fp = popen("which pkexec", "r");
    if (fp==NULL) return;
    fgets(output, 1024, fp);
    status = pclose(fp);
    if (status==0) {
        run_child("/usr/bin/pkexec", "/usr/local/sbin/resetmsmice-enable-boot", output, 1024);       
        g_print("output: %s %s", output, "\n");
    } else {
        g_print("You must be root to execute this program.");
    }

}

void disable_clicked(GtkWidget *widget, gpointer data)
{
}

#define PIPE_READ 0
#define PIPE_WRITE 1

int run_child(char *command, char *arg, char *output, int size) {
//    int stdin_pipe[2];
    int stdout_pipe[2];
    int child;
    char key;
    int result;

/*  
  if (pipe(stdin_pipe) < 0) {
    perror("allocating pipe for child input redirect");
    return -1;
  }*/
    if (pipe(stdout_pipe) < 0) {
//    close(stdin_pipe[PIPE_READ]);
//    close(stdin_pipe[PIPE_WRITE]);
        perror("allocating pipe for child output redirect");
        return -1;
    }

    child = fork();
    if (child == 0) {
    // child continues here

        // redirect stdin
        /*
        if (dup2(stdin_pipe[PIPE_READ], STDIN_FILENO) == -1) {
          perror("redirecting stdin");
          return -1;
        }*/

        // redirect stdout
        if (dup2(stdout_pipe[PIPE_WRITE], STDOUT_FILENO) == -1) {
            perror("redirecting stdout");
            return -1;
        }

        // redirect stderr
        if (dup2(stdout_pipe[PIPE_WRITE], STDERR_FILENO) == -1) {
            perror("redirecting stderr");
            return -1;
        }

    // all these are for use by parent only
//       close(stdin_pipe[PIPE_READ]);
//       close(stdin_pipe[PIPE_WRITE]);
        close(stdout_pipe[PIPE_READ]);
        close(stdout_pipe[PIPE_WRITE]); 

        // run child process image
        // replace this with any exec* function find easier to use ("man exec")
        result = execl(command, command, arg, (char*) NULL);

        // if we get here at all, an error occurred, but we are in the child
        // process, so just exit
        perror("exec of the child process");
        exit(result);
    } else if (child > 0) {
        // parent continues here

        // close unused file descriptors, these are for child only
//    close(stdin_pipe[PIPE_READ]);
        close(stdout_pipe[PIPE_WRITE]); 

        int i = 0;
        // Just a char by char read here, you can change it accordingly
        while (read(stdout_pipe[PIPE_READ], &key, 1) == 1 && i < (size-1)) {
            output[i] = key;
            i++;
        }

        // open of course as long as you want to talk to the child
        //    close(stdin_pipe[PIPE_WRITE]);
            close(stdout_pipe[PIPE_READ]);
        } else {
        // failed to create child
        //    close(stdin_pipe[PIPE_READ]);
        //    close(stdin_pipe[PIPE_WRITE]);
            close(stdout_pipe[PIPE_READ]);
            close(stdout_pipe[PIPE_WRITE]);
        }
    return child;
}   


void reset_now_clicked(GtkWidget *widget, gpointer data)
{
    char output[1024];
    int status;
    FILE *fp;

    fp = popen("which pkexec", "r");
    if (fp==NULL) return;
    fgets(output, 1024, fp);
    status = pclose(fp);
    if (status==0) {
        run_child("/usr/bin/pkexec", "/usr/local/sbin/resetmsmice", output, 1024);       
        g_print("output: %s %s", output, "\n");
    } else {
        g_print("You must be root to execute this program.");
    }
}

   

int main(int argc, char *argv[])
{
    GtkBuilder *builder;
    GtkWidget  *window;
    GtkWidget  *enable_button, *disable_button, *reset_now_button;

    gtk_init(&argc, &argv);

    builder = gtk_builder_new ();
    gtk_builder_add_from_file(builder, "resetmsmice.xml", NULL);
    window = GTK_WIDGET(gtk_builder_get_object (builder, "dialog1"));
    if (window == NULL) return 0;
    enable_button = GTK_WIDGET(gtk_builder_get_object (builder, "enable_button"));
    disable_button = GTK_WIDGET(gtk_builder_get_object (builder, "disable_button"));
    reset_now_button = GTK_WIDGET(gtk_builder_get_object (builder, "reset_now_button"));
    gtk_window_set_title(GTK_WINDOW(window), "Reset Microsoft Mice");

    gtk_window_set_resizable(GTK_WINDOW(window), FALSE);

    gtk_builder_connect_signals (builder, NULL);

    g_signal_connect(G_OBJECT (window), "delete-event",
                      G_CALLBACK (delete_event), NULL);

    g_signal_connect(G_OBJECT (window), "destroy", 
                      G_CALLBACK (destroy), NULL);
                 
    g_signal_connect(G_OBJECT (enable_button), "clicked",
                     G_CALLBACK (enable_clicked), NULL);
           
    g_signal_connect(G_OBJECT (disable_button), "clicked",
                      G_CALLBACK (disable_clicked), NULL);
       
    g_signal_connect(G_OBJECT (reset_now_button), "clicked",
                      G_CALLBACK (reset_now_clicked), NULL);
       
    gtk_widget_show_all(window);
                   
    gtk_main();

    g_object_unref(G_OBJECT(builder));

    return 0;
}

